#include "requests.h"

#include <gtest/gtest.h>

TEST(TradeCaptureReportTest, size)
{
    const auto msg = create_trade_capture_report_request(
            111,
            "T123456x",
            100,
            1.5,
            "ITMO",
            Side::Buy,
            Capacity::Principal,
            "ITVT",
            Capacity::Agency,
            "STUd",
            false);
    EXPECT_EQ(70, msg.size());
}

TEST(TradeCaptureReportTest, simple)
{
    const std::vector<unsigned char> etalon = {
        0xBA, 0xBA,
        0x44, 0x00,
        0x3C,
        0x00,
        0x6F, 0x00, 0x00, 0x00,
        0x54, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x78, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x64, 0x00, 0x00, 0x00,
        0xC0, 0xE1, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03,
        0x01,
        0x11,
        0x20,
        0x02,
        0x31,
        0x50,
        0x49, 0x54, 0x4D, 0x4F,
        0x32,
        0x32,
        0x41,
        0x49, 0x54, 0x56, 0x54,
        0x33,
        0x53, 0x54, 0x55, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x01
    };
    const auto msg = create_trade_capture_report_request(
            111,
            "T123456x",
            100,
            1.5,
            "ITMO",
            Side::Buy,
            Capacity::Principal,
            "ITVT",
            Capacity::Agency,
            "STUd",
            false);
    EXPECT_EQ(etalon, msg);
}

TEST(TradeCaptureReportTest, another)
{
    const std::vector<unsigned char> etalon = {
        0xBA, 0xBA,
        0x44, 0x00,
        0x3C,
        0x00,
        0x57, 0x0E, 0x00, 0x00,
        0x54, 0x78, 0x31, 0x32, 0x39, 0x38, 0x36, 0x33, 0x31, 0x35,
        0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x37, 0x33, 0x00, 0x00,
        0xF8, 0xD0, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x03,
        0x01,
        0x11,
        0x20,
        0x02,
        0x32,
        0x50,
        0x49, 0x54, 0x56, 0x54,
        0x32,
        0x31,
        0x41,
        0x49, 0x54, 0x4D, 0x4F,
        0x33,
        0x31, 0x31, 0x4C, 0x41, 0x42, 0x00, 0x00, 0x00,
        0x02
    };
    const auto msg = create_trade_capture_report_request(
            3671,
            "Tx12986315y",
            13111,
            5.0123,
            "ITVT",
            Side::Sell,
            Capacity::Principal,
            "ITMO",
            Capacity::Agency,
            "11LAB",
            true);
    EXPECT_EQ(etalon, msg);
}

TEST(TradeCaptureReportTest, short_trade_report_id__singular_share__small_price)
{
    const std::vector<unsigned char> etalon = {
        0xBA, 0xBA,
        0x44, 0x00,
        0x3C,
        0x00,
        0x01, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,
        0xD2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03,
        0x01,
        0x11,
        0x20,
        0x02,
        0x32,
        0x52,
        0x49, 0x54, 0x56, 0x54,
        0x32,
        0x31,
        0x41,
        0x49, 0x54, 0x4D, 0x4F,
        0x33,
        0x78, 0x79, 0x7A, 0x31, 0x32, 0x33, 0x75, 0x69,
        0x01
    };
    const auto msg = create_trade_capture_report_request(
            1,
            "x",
            1,
            0.0001234,
            "ITVT",
            Side::Sell,
            Capacity::RisklessPrincipal,
            "ITMO",
            Capacity::Agency,
            "xyz123ui",
            false);
    EXPECT_EQ(etalon, msg);
}

TEST(TradeCaptureReportTest, too_big_trade_report_id)
{
    const std::vector<unsigned char> etalon = {
        0xBA, 0xBA,
        0x44, 0x00,
        0x3C,
        0x00,
        0x57, 0x0E, 0x00, 0x00,
        0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x30, 0x39, 0x38, 0x37,
        0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x50, 0x4F, 0x4D, 0x49,
        0x37, 0x33, 0x00, 0x00,
        0xF8, 0xD0, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x03,
        0x01,
        0x11,
        0x20,
        0x02,
        0x32,
        0x50,
        0x49, 0x54, 0x56, 0x54,
        0x32,
        0x31,
        0x41,
        0x49, 0x54, 0x4D, 0x4F,
        0x33,
        0x31, 0x31, 0x4C, 0x41, 0x42, 0x00, 0x00, 0x00,
        0x02
    };
    const auto msg = create_trade_capture_report_request(
            3671,
            "qwerty0987654321POMIRAN",
            13111,
            5.0123,
            "ITVT",
            Side::Sell,
            Capacity::Principal,
            "ITMO",
            Capacity::Agency,
            "11LAB",
            true);
    EXPECT_EQ(etalon, msg);
}

TEST(TradeCaptureReportTest, too_big_symbol)
{
    const std::vector<unsigned char> etalon = {
        0xBA, 0xBA,
        0x44, 0x00,
        0x3C,
        0x00,
        0x01, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,
        0xD2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03,
        0x01,
        0x11,
        0x20,
        0x02,
        0x31,
        0x52,
        0x49, 0x54, 0x4D, 0x4F,
        0x32,
        0x32,
        0x41,
        0x49, 0x54, 0x56, 0x54,
        0x33,
        0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x30, 0x39,
        0x01
    };
    const auto msg = create_trade_capture_report_request(
            1,
            "x",
            1,
            0.0001234,
            "ITMO",
            Side::Buy,
            Capacity::RisklessPrincipal,
            "ITVT",
            Capacity::Agency,
            "qwerty0987654321POMIRAN",
            false);
    EXPECT_EQ(etalon, msg);
}

TEST(TradeCaptureReportTest, thin_price)
{
    const std::vector<unsigned char> etalon = {
        0xBA, 0xBA,
        0x44, 0x00,
        0x3C,
        0x00,
        0x9F, 0x86, 0x01, 0x00,
        0x54, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x78, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0xA1, 0x07, 0x00,
        0x01, 0x2D, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x03,
        0x01,
        0x11,
        0x20,
        0x02,
        0x31,
        0x50,
        0x49, 0x54, 0x4D, 0x4F,
        0x32,
        0x32,
        0x52,
        0x49, 0x54, 0x56, 0x54,
        0x33,
        0x31, 0x53, 0x54, 0x55, 0x64, 0x00, 0x00, 0x00,
        0x02
    };
    const auto msg = create_trade_capture_report_request(
            99999,
            "T123456x",
            500000,
            2.0000001,
            "ITMO",
            Side::Buy,
            Capacity::Principal,
            "ITVT",
            Capacity::RisklessPrincipal,
            "1STUd",
            true);
    EXPECT_EQ(etalon, msg);
}
